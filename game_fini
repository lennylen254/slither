import pygame    #import the pygame module(library)
import time
import random

pygame.init()   #initialize(set) the materials required

white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0,155,0)

display_Width = 800
display_Height = 500

gameDisplay = pygame.display.set_mode((display_Width,display_Height))  #surface
pygame.display.set_caption(" Slither: Lennylen")




clock = pygame.time.Clock()

block_size = 20
FPS = 15

font = pygame.font.SysFont(None, 25)					#adding text done here

def snake(block_size, snakelist):
	for XnY in snakelist:
		pygame.draw.rect(gameDisplay, green, [XnY[0], XnY[1], block_size, block_size])

def text_objects(text,color):
	textSurface = font.render(text, True, color)
	return textSurface, textSurface.get_rect()
		
def message_to_screen(msg,color):							#text function
	textSurf, textRect = text_objects(msg, color)
	textRect.center = (display_Width/2), (display_Height/2)
	gameDisplay.blit(textSurf, textRect)
	#screen_text = font.render(msg, True, color)
	#gameDisplay.blit (screen_text, [display_Width/2,display_Height/2])

def gameLoop():
	gameExit = False  #'constant variable'
	gameOver = False

	lead_x = display_Width/2
	lead_y = display_Height/2

	lead_x_change = 0
	lead_y_change = 0
	
	snakelist = []                       #container to hold snake lengthening(body segments)
	snakeLength = 1                      #actual length of snake
	
	randAppleX = round(random.randrange(0, display_Width-block_size))#/10.0) * 10.0
	randAppleY = round(random.randrange(0, display_Height-block_size))#/10.0) * 10.0
	
	while not gameExit:							#this is the game loop
	
		while gameOver == True:
			gameDisplay.fill(white)
			message_to_screen("Game Over, Press c to continue or q to quit", red)
			pygame.display.update()
			
			for event in pygame.event.get():
				if event.type == pygame.QUIT:
					gameExit = True
					gameOver = False			
				if event.type == pygame.KEYDOWN:
					if event.key == pygame.K_q:
						gameExit = True
						gameOver = False
					if event.key == pygame.K_c:
						gameLoop()
			
		
		
		for event in pygame.event.get():			#this is the event loop
			if event.type == pygame.QUIT:
				gameExit = True  #stop loop
			
			if event.type == pygame.KEYDOWN:
				if event.key == pygame.K_LEFT:
					lead_x_change = -block_size
					lead_y_change = 0
				elif event.key == pygame.K_RIGHT:
					lead_x_change = block_size
					lead_y_change = 0			
				elif event.key == pygame.K_UP:
					lead_y_change = -block_size
					lead_x_change = 0
				elif event.key == pygame.K_DOWN:
					lead_y_change = block_size
					lead_x_change = 0
			
		if lead_x >= display_Width or lead_x < 0 or lead_y >= display_Height or lead_y < 0:  			#Boundaries set here
			gameOver = True
		
		
		#this is the game logic
		lead_x += lead_x_change       #add to lead_x_change	
		lead_y += lead_y_change       #add to lead_y_change
					
		gameDisplay.fill(white)
		apple_thickness = 30
		pygame.draw.rect(gameDisplay,red, [randAppleX, randAppleY, apple_thickness,apple_thickness])
		
		
		snakeHead = []
		snakeHead.append(lead_x)
		snakeHead.append(lead_y)
		snakelist.append(snakeHead)
		
		if len(snakelist) > snakeLength:
			del snakelist[0]                   #RULE : never get longer than snakeLength
			
		for eachSegment in snakelist[:-1]:     # snake doesnt eat itself
			if eachSegment == snakeHead:
				gameOver = True
		
		snake(block_size, snakelist)
		pygame.display.update()
		
		
##		if lead_x >= randAppleX and lead_x <= randAppleX + apple_thickness:
##			if lead_y >= randAppleY and lead_y <= randAppleY + apple_thickness:
##				randAppleX = round(random.randrange(0, display_Width-block_size))#/10.0) * 10.0
##				randAppleY = round(random.randrange(0, display_Height-block_size))#/10.0) * 10.0
##				snakeLength += 1
		
		if lead_x > randAppleX and lead_x < randAppleX + apple_thickness or lead_x + block_size > randAppleX and lead_x + block_size < randAppleX + apple_thickness:
			if lead_y > randAppleY and lead_y < randAppleY + apple_thickness:
				randAppleX = round(random.randrange(0, display_Width-block_size))#/10.0) * 10.0
				randAppleY = round(random.randrange(0, display_Height-block_size))#/10.0) * 10.0
				snakeLength += 1
			elif lead_y + block_size > randAppleY and lead_y + block_size < randAppleY + apple_thickness:
				randAppleX = round(random.randrange(0, display_Width-block_size))#/10.0) * 10.0
				randAppleY = round(random.randrange(0, display_Height-block_size))#/10.0) * 10.0
				snakeLength += 1
		
		clock.tick(FPS)

	pygame.quit()
	quit()

gameLoop()

#basics of a game(skeleton)
